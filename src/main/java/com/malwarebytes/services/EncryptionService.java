package com.malwarebytes.services;

import com.malwarebytes.model.Card;
import com.malwarebytes.model.CardInfo;
import com.malwarebytes.services.util.TripleDesCipher;
import org.jpos.iso.ISOMsg;
import org.jpos.iso.packager.ISO93BPackager;

import java.nio.charset.StandardCharsets;
import java.util.Base64;

public class EncryptionService {
    private static final String ALPHA_NUMERIC = "ABCDEFGHIJKLMNOPQRSTUVWXYZ" +
            "0123456789" +
            "abcdefghijklmnopqrstuvxyz";

    public String generateKey(int n) {
        // create StringBuffer size of AlphaNumericString
        StringBuilder sb = new StringBuilder(n);
        for (int i = 0; i < n; i++) {
            int index = (int) (ALPHA_NUMERIC.length() * Math.random());
            sb.append(ALPHA_NUMERIC
                    .charAt(index));
        }
        return sb.toString();
    }

    public String tokenize(CardInfo cardInfo, final String key) throws Exception {
        TripleDesCipher tripleDesCipher = new TripleDesCipher(key.getBytes(StandardCharsets.UTF_8));
        ISOMsg msg = new ISOMsg();
        msg.setPackager(new ISO93BPackager());
        msg.setMTI("0200");
        msg.set(2, cardInfo.getCardNumber());
        msg.set(14, cardInfo.getExpirationDate().replace("/", ""));
        msg.set(61, cardInfo.getCardCVV());
        return Base64.getEncoder().encodeToString(tripleDesCipher.encrypt(msg.pack()));

    }

    public Card deTokenize(String token, final String key) throws Exception {
        TripleDesCipher tripleDesCipher = new TripleDesCipher(key.getBytes(StandardCharsets.UTF_8));
        byte[] decodedToken = Base64.getDecoder().decode(token.getBytes(StandardCharsets.UTF_8));
        ISOMsg msg = new ISOMsg();
        msg.setPackager(new ISO93BPackager());
        msg.unpack(tripleDesCipher.decrypt(decodedToken));
        return Card.
                builder()
                .expirationDate(msg.getString(14))
                .cardCVV(msg.getString(61))
                .cardNumber(msg.getString(2))
                .build();
    }
}
