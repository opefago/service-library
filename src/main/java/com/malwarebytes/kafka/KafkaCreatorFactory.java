package com.malwarebytes.kafka;

import com.malwarebytes.kafka.serializer.KafkaJsonSerializer;
import io.dropwizard.util.Duration;
import org.apache.kafka.clients.producer.KafkaProducer;
import org.apache.kafka.clients.producer.ProducerConfig;

import java.util.Properties;

public class KafkaCreatorFactory {
    public <T> KafkaApi<T> create(final KafkaProducerConfig config){
        Properties props = new Properties();

        props.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, config.getBootstrapServer());
        props.put(ProducerConfig.ACKS_CONFIG, config.getAcks().orElse(""));
        props.put(ProducerConfig.RETRIES_CONFIG, config.getRetries().orElse(0));
        props.put(ProducerConfig.BATCH_SIZE_CONFIG, config.getBatchSize());
        props.put(ProducerConfig.LINGER_MS_CONFIG, (int)config.getLinger().toMilliseconds());
        props.put(ProducerConfig.BUFFER_MEMORY_CONFIG, config.getBufferMemory());
        props.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, "org.apache.kafka.common.serialization.StringSerializer");
        props.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, KafkaJsonSerializer.class.getName());
        props.put(ProducerConfig.MAX_IN_FLIGHT_REQUESTS_PER_CONNECTION,
                config.getMaxInFlightRequestsPerConnection().orElse(1));
        props.put(ProducerConfig.MAX_BLOCK_MS_CONFIG, config.getMaxPollBlockTime().orElse(Duration.milliseconds(1)).toMilliseconds());
        props.put(ProducerConfig.COMPRESSION_TYPE_CONFIG, config.getCompressionType());
        props.put(ProducerConfig.SEND_BUFFER_CONFIG, config.getSendBufferBytes());
        props.put(ProducerConfig.RECEIVE_BUFFER_CONFIG, config.getReceiveBufferBytes());
        props.put(ProducerConfig.REQUEST_TIMEOUT_MS_CONFIG, (int)config.getRequestTimeout().toMilliseconds());
        props.put(ProducerConfig.ENABLE_IDEMPOTENCE_CONFIG, config.isEnableIdempotence());
        if(config.getTransactionalId().isPresent()) {
            props.put(ProducerConfig.TRANSACTIONAL_ID_CONFIG, config.getTransactionalId().get());
        }
        return new KafkaApi<T>( new KafkaProducer<>(props), config.getTopic());
    }
}
