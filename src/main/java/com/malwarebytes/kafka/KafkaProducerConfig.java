package com.malwarebytes.kafka;

import com.fasterxml.jackson.annotation.JsonProperty;
import io.dropwizard.jackson.Discoverable;
import io.dropwizard.util.Duration;
import io.dropwizard.validation.MinDuration;
import lombok.*;
import org.apache.kafka.common.record.CompressionType;

import javax.validation.constraints.Min;
import javax.validation.constraints.NotEmpty;
import java.util.Optional;

@AllArgsConstructor
@NoArgsConstructor
@Getter
@Setter
@ToString
@EqualsAndHashCode
public class KafkaProducerConfig implements Discoverable {
    @NotEmpty
    @JsonProperty
    private String topic;

    @NotEmpty
    @JsonProperty
    private String bootstrapServer;

    @JsonProperty
    private Optional<String> acks = Optional.empty();

    @JsonProperty
    private Optional<Integer> retries = Optional.empty();

    @JsonProperty
    private Optional<Integer> maxInFlightRequestsPerConnection = Optional.empty();

    @JsonProperty
    private Optional<Duration> maxPollBlockTime = Optional.empty();

    @NotEmpty
    @JsonProperty
    private String compressionType = CompressionType.GZIP.name;

    @Min(-1)
    @JsonProperty
    private int sendBufferBytes = -1;

    @Min(-1)
    @JsonProperty
    private int receiveBufferBytes = -1;

    @Min(0L)
    @JsonProperty
    private long bufferMemory = 32 * 1024 * 1024L;

    @Min(0)
    @JsonProperty
    private int batchSize = 16384;

    @MinDuration(0)
    @JsonProperty
    private Duration linger = Duration.milliseconds(0);

    @MinDuration(0)
    @JsonProperty
    private Duration requestTimeout = Duration.seconds(30);

    @JsonProperty
    private boolean enableIdempotence = false;

    @JsonProperty
    private Optional<String> transactionalId = Optional.empty();
}
